<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>google-cloud | Martin Jung</title>
    <link>https://martinjung.eu/tag/google-cloud/</link>
      <atom:link href="https://martinjung.eu/tag/google-cloud/index.xml" rel="self" type="application/rss+xml" />
    <description>google-cloud</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-gb</language><copyright>Â© 2022 Martin Jung </copyright><lastBuildDate>Mon, 20 Aug 2018 00:00:00 +0200</lastBuildDate>
    <image>
      <url>https://martinjung.eu/media/logo_hu08891b619dca7ea3a10c5ed6def994ae_9949_300x300_fit_lanczos_2.png</url>
      <title>google-cloud</title>
      <link>https://martinjung.eu/tag/google-cloud/</link>
    </image>
    
    <item>
      <title>Running rstudio in the Google cloud - [2]</title>
      <link>https://martinjung.eu/post/2018_datascienceingooglecloud_nr2/</link>
      <pubDate>Mon, 20 Aug 2018 00:00:00 +0200</pubDate>
      <guid>https://martinjung.eu/post/2018_datascienceingooglecloud_nr2/</guid>
      <description>&lt;p&gt;In this new post I will go through my process of getting familiar with running &lt;em&gt;R&lt;/em&gt; in the Google cloud and the posting sort of follows my previous &lt;a href=&#34;https://martinjung.eu/post/2018_datascienceingooglecloud/&#34;&gt;post&lt;/a&gt; on getting started with the Google cloud. My dream setup would include to being able to switch seamless between running r code locally or in the cloud whenever I require more processing power. For instance similar &lt;a href=&#34;https://github.com/Azure/doAzureParallel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;doAzureParallel&lt;/a&gt; package available for Microsoft Azure.
&lt;br&gt;
For Google cloud engine, there also exists a neat package called &lt;a href=&#34;https://cloudyr.github.io/googleComputeEngineR/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;googleComputeEngineR&lt;/a&gt;, that allows to easily setup a virtual machine and run code remotely.
So let&amp;rsquo;s setup the googleComputeEngineR package. As always, please note you alone (the dear reader) is responsible to keep track of your virtual machines in the cloud. If you do not stop them (i.e. shut them down), then this will &lt;mark&gt;cost you money!&lt;/mark&gt;&lt;/p&gt;
&lt;hr&gt;
In order to use the **googleComputeEngineR** package, we first need to create a credentials file. For my google cloud project and personal linux machine I have created such a file on my local system like this:
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create the file
touch ~/.Renviron
echo &amp;quot;GCE_AUTH_FILE=\&amp;quot;~/wasserdampf.json\&amp;quot;&amp;quot; &amp;gt;&amp;gt; ~/.Renviron
echo &amp;quot;GCE_DEFAULT_PROJECT_ID=\&amp;quot;wolke7-208420\&amp;quot;&amp;quot; &amp;gt;&amp;gt; ~/.Renviron
echo &amp;quot;GCE_DEFAULT_ZONE=\&amp;quot;us-central1-a\&amp;quot;&amp;quot; &amp;gt;&amp;gt; ~/.Renviron
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One also needs a service account auth key (here called wasserdampf.json). Find more information how to get such a key &lt;a href=&#34;https://cloudyr.github.io/googleComputeEngineR/articles/installation-and-authentication.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.
Now for starters lets start R and install the &lt;strong&gt;googleComputeEngineR&lt;/strong&gt; package, then start up a virtual machine with Rstudio setup.&lt;/p&gt;
&lt;h2 id=&#34;run-a-rstudio-in-the-google-cloud&#34;&gt;Run a Rstudio in the google cloud&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;llibrary(googleAuthR)
library(googleComputeEngineR)
library(future)

# Start up a rstudio vm (or create if not already existing)
vm &amp;lt;- gce_vm(template = &amp;quot;rstudio&amp;quot;,
             name = &amp;quot;rstudio&amp;quot;,
             username = &amp;quot;martin&amp;quot;, password = &amp;quot;wolkenwind&amp;quot;,
             predefined_type = &amp;quot;n1-standard-1&amp;quot; # Available machines via gce_list_machinetype()
)

# See if the vm exists
gce_list_instances()

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; ==Google Compute Engine Instance List==
&amp;gt;      name   machineType  status          zone     externalIP   creationTimestamp
&amp;gt; 1 rstudio n1-standard-1 RUNNING us-central1-a XX.XXX.XXX.XXX 2018-08-23 14:41:45
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The externalIP gives the ip through which rstudio server can be run in any webbrowser
&lt;img src=&#34;https://martinjung.eu/img/posts/GoogleCloud_Rstudio.png&#34; alt=&#34;Rstudio run in the google cloud&#34;&gt;&lt;/p&gt;
&lt;p&gt;Equally it is quite easy to control the VM via SSH directly in the browser and the &lt;strong&gt;googleComputeEngineR&lt;/strong&gt; package provides an easy function to open such a connection:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;gce_ssh_browser(vm)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly ensure that you stop the VM(or delete it).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# Shut down the vm
gce_vm_stop(vm)

# Or delete the vm
gce_vm_delete(vm)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Google Earth Engine</title>
      <link>https://martinjung.eu/post/2018_googleearthengine-intro/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0200</pubDate>
      <guid>https://martinjung.eu/post/2018_googleearthengine-intro/</guid>
      <description>&lt;p&gt;In a previous post, I gave a brief introduction how to use &lt;a href=&#34;https://martinjung.eu/post/2018_datascienceingooglecloud/&#34;&gt;google cloud compute&lt;/a&gt; to kickstart your cloud computing experience. While it is possible to run large spatial operations on google cloud compute, it is quite time-consuming to set up all the routines to load and process geospatial data. Luckily there is now a new platform (currently in beta-testing) called Google Earth Engine (GEE) described as &lt;a href=&#34;https://earthengine.google.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;planetary scale platform for spatial analyses&lt;/a&gt;.
&lt;br&gt;
&lt;br&gt;
GEE is (currently) free to use and users can sign up for a &lt;a href=&#34;https://earthengine.google.com/signup/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;beta-testing&lt;/a&gt;. There are a &lt;a href=&#34;https://earthengine.google.com/datasets/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wide range of datasets&lt;/a&gt; already available within GEE, including all available Landsat, Sentinel and MODIS satellite data. GEE furthermore allows to pre-process these layers and the fantastatic google team also already pre-computed layers such as cloud masks or ingested fully radiometrically corrected layers. If the reader is interested in what is possible with GEE, have a look at the &lt;a href=&#34;https://earthengine.google.com/case_studies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;case studies&lt;/a&gt; on the GEE website.
\&lt;/p&gt;
&lt;hr&gt;
In the rest of this post I will showcase some exemplary scripts I coded in **Javascript** which, besides **python**, is the primary way to access and pre-process data in GEE. I will mostly only comment on my script as there are extensive tutorials, videos and detailed API descriptions [available](https://developers.google.com/earth-engine/) for GEE.
\
Whenever I load outside data (such as ESRI shapefiles) into GEE, I usually convert them to a KML file and then load them as Google Fusion Table (search online how to do this). All the (java-)scripts below can be pasted into the [GEE code console](https://code.earthengine.google.com), but if any errors occur then usually because of missing permissions (you might not be able to access my Google Fusion Tables).
\
&lt;p&gt;The following script quantifies the date of forest loss from the &lt;a href=&#34;https://earthenginepartners.appspot.com/science-2013-global-forest/download_v1.5.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hansen forest cover dataset&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Load the global Hansen forest dataset
var gfcImage = ee.Image(&amp;quot;UMD/hansen/global_forest_change_2017_v1_5&amp;quot;);
/*
@author Martin Jung - m.jung@sussex.ac.uk
Idea:
Get average date of forest loss within sampling extent
*/

// Coordinates and parameters
// (This is a fusiontable id containing my polygon shapefile)
var fullsites = ee.FeatureCollection(&#39;ft:1Oet2yGWvldNoVx8A6ZlCi75Ks_lrEG0dG9oD6k2j&#39;); // All sites

//////// Other Parameters //////////
var export_geometry = false; // export the geometry in the csv
var scale = 30; // Resolution over which image collection should be reduced, 30 m = native scale
var reduce = ee.Reducer.mean() // Reducer for image collection
// Also available max(), mean(), median(), min(), mode(), or(), product(), sum(), stdDev()
var what = &amp;quot;ForestLoss&amp;quot;; // Export name

// ################################################################### //
//                Function and main CODE starts here                   //
// ################################################################### //

// Create TimeBand
function createTimeBand(image) {
  return image.addBands(image.metadata(&#39;system:time_start&#39;));
}

// ---- //
// Select the band with loss year
var forestImage = gfcImage.select([&#39;lossyear&#39;]);
// Mask out pixels with no lossyear
var m = forestImage.gt(0);
forestImage = forestImage.mask(m);

// -------------------------------- //
// Reduce per polygon per polygon
var extracted = forestImage.reduceRegions(fullsites, reduce, scale);

Export.table.toDrive({
  collection: extracted.select([&amp;quot;.*&amp;quot;], null, export_geometry),
  description: &amp;quot;PREDICTSHansen_&amp;quot;+what,
  fileNamePrefix: &amp;quot;PREDICTSHansen_&amp;quot;+what,
  fileFormat: &#39;geoJSON&#39;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
Not too difficult, right?
\
Here is another script that calculates a 95 % percentile composite of three months of EVI data calculated from all available Landsat surface reflectance images from 1984 to 2017. My script furthermore exclude all pixels that are clearly covered by water (using data from [Pekel et al. 2016](https://www.nature.com/articles/nature20584) ) and mask out unsuitable images (too many clouds) as well as clouds and cloud-shadows. Finally the mean, composited EVI within a buffer was exported.
Full script below:
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Images and shapefiles
// Including landsat Level 1 land-surface-reflectance bands
var l8_led = ee.ImageCollection(&amp;quot;LANDSAT/LC08/C01/T1_SR&amp;quot;),
    l4_led = ee.ImageCollection(&amp;quot;LANDSAT/LT04/C01/T1_SR&amp;quot;),
    l5_led = ee.ImageCollection(&amp;quot;LANDSAT/LT05/C01/T1_SR&amp;quot;),
    l7_led = ee.ImageCollection(&amp;quot;LANDSAT/LE07/C01/T1_SR&amp;quot;),
    gsw = ee.Image(&amp;quot;JRC/GSW1_0/GlobalSurfaceWater&amp;quot;), // Global Surface water dataset
    usgadm = ee.FeatureCollection(&amp;quot;ft:1kA8n0e3lvUVuWJSixVf5WaPyeqskp8kZg9zU9TBX&amp;quot;),
    bbs_union = ee.FeatureCollection(&amp;quot;ft:1hqCRJam4b3niJZgRmJkOOMEe_qTwM77gZ-TyP4pe&amp;quot;), // Shapefiles I use my analyses. They contain polygons
    bbs = ee.FeatureCollection(&amp;quot;ft:1gUxInqbJAG-kcH6bn6PioNnZ6G7fZOBIIaEADnIO&amp;quot;);
/*
author: Martin Jung - 2018 (m.jung@sussex.ac.uk)
Idea:
Calculate avg overall EVI for all routes.
*/
// Parameters
var scale = 30; // Resolution over which image collection should be reduced, 30m = native scale
var precision = 10000; // Rounding precision
var cloudlimit = 80; // Should images with that many clouds be kept ? In order to reduce effect on non-filtered shades
var reduce = ee.Reducer.percentile([95]) ; // How should composites be reduced?
var startmonth = 3; // start Month when to use images from
var endmonth = 6; // end month
var startday = 20; // start day
var endday = 20; // end day
var fname = &amp;quot;EVIstack&amp;quot;; // FileNamedDescription
var what = &#39;evi&#39;; // Name of resulting spectral index band

// Expressions
var f_evi = &#39;2.5 * ((nir - red) / (nir + 2.4 * red + 1))&#39;; // EVI2 formula (two-band version)

// ################################################################### //
//                Function and main CODE starts here                   //
// ################################################################### //

// Function to mask excess EVI values defined as &amp;gt; 1 and &amp;lt; 0
var maskExcess = function(image) {
    var hi = image.lte(1);
    var lo = image.gte(0);
    var masked = image.mask(hi.and(lo));
    return image.mask(masked);
  };

// Function to remove clouds - expects the new SR data to have a cfmask layer
// 126122017 - Adapted to work with LT1
var maskclouds = function(scene) {
  // The &amp;quot;pixel_qa&amp;quot; band has various flags encoded in
  // different bits.  We extract some of them as individual mask bands.
  // Note: Cloud masking information is present in &amp;quot;pixel_qa&amp;quot;
  // pixel_qa Bit 1: Clear pixel indicator.
  // pixel_qa Bit 2: Water indicator.
  // pixel_qa Bit 3: Cloud shadow indicator.
  // pixel_qa Bit 5: Cloud indicator.
  // pixel_qa Bits 6-7: Cloud confidence.
  // Fill = https://explorer.earthengine.google.com/#detail/LANDSAT%2FLE07%2FC01%2FT1_SR
  var clear = scene.select(&#39;pixel_qa&#39;).bitwiseAnd(2).neq(0);
  clear = scene.updateMask(clear);
  return(clear);
};

// Water mask all pixels with over 90 % water occurence
var water_mask = gsw.select(&#39;occurrence&#39;).gt(90).unmask(0);
var watermask = function(image){
  var masked = water_mask.eq(0);
  return image.mask(masked);
};

// Create TimeBand
function createTimeBand(image) {
  return image.addBands(image.metadata(&#39;system:time_start&#39;));
}

// Filter out those bands with no images and create and empty image where there is none
// (This function should not be necessary as the area I investigate has full availability of Landsat 4-8)
var conditional = function(image) {
  return ee.Algorithms.If(ee.Number(image.get(&#39;num_elements&#39;)).gt(0),
                          image,
                          ee.Image(0).toDouble()
                          .set(&#39;system:time_start&#39;,image.get(&#39;system:time_start&#39;))
                          .rename(what));
};

// VegIndex calculator. Calculate the EVI index (two-band versiob)
function calcIndex(image){
  var evi = image.expression(
      f_evi,
        {
          red: image.select(&#39;red&#39;).multiply(0.0001),    // 620-670nm, RED
          nir: image.select(&#39;nir&#39;).multiply(0.0001)    // 841-876nm, NIR
        });
    // Rename that band to something appropriate
    var dimage = ee.Date(ee.Number(image.get(&#39;system:time_start&#39;))).format();
    return evi.select([0], [what]).set({&#39;datef&#39;: dimage,&#39;system:time_start&#39;: ee.Number(image.get(&#39;system:time_start&#39;))});
}

// ----------------------------------------- //
// Further PROCESSING CODE STARTS BELOW              //
// ----------------------------------------- //

// Load the polygon shapefiles for my analysis and use a bounding box to clip all outputs
var bbs_filter = bbs_union;
var bbox = bbs_filter.geometry().bounds();
Map.addLayer(bbs_filter);Map.addLayer(bbox) // Add to map and center to it


  // Filter the layers and set bounds
  // get the LC8 collection
  var L8 = l8_led
     .filterBounds(bbox) // filter all Landsat images by bound
     .filterDate(ee.Date.fromYMD(1984,startmonth,startday), ee.Date.fromYMD(2017,endmonth,endday)) // Filter to up to latest sampling
     .filterMetadata(&#39;CLOUD_COVER_LAND&#39;,&#39;less_than&#39;,cloudlimit) // Ignore images with too many clouds
     .map(maskclouds) // mask clouds and cloud-shadows from the image
     .map(watermask) // mask out water
     .map(createTimeBand); // add a time band

  // get the LE7 collection
  var L7 = l7_led
     .filterBounds(bbox)
     .filterDate(ee.Date.fromYMD(1984,startmonth,startday), ee.Date.fromYMD(2017,endmonth,endday)) // Filter to up to latest sampling
     .filterMetadata(&#39;CLOUD_COVER_LAND&#39;,&#39;less_than&#39;,cloudlimit)
     .map(maskclouds)
     .map(watermask)
     .map(createTimeBand);

  // get the LE5 collection
  var L5 = l5_led
     .filterBounds(bbox)
     .filterDate(ee.Date.fromYMD(1984,startmonth,startday), ee.Date.fromYMD(2017,endmonth,endday)) // Filter to up to latest sampling
     .filterMetadata(&#39;CLOUD_COVER_LAND&#39;,&#39;less_than&#39;,cloudlimit)
     .map(maskclouds)
     .map(watermask)
     .map(createTimeBand);

  // get the LE5 collection
  var L4 = l4_led
     .filterBounds(bbox)
     .filterDate(ee.Date.fromYMD(1984,startmonth,startday), ee.Date.fromYMD(2017,endmonth,endday)) // Filter to up to latest sampling
     .filterMetadata(&#39;CLOUD_COVER_LAND&#39;,&#39;less_than&#39;,cloudlimit)
     .map(maskclouds)
     .map(watermask)
     .map(createTimeBand);

  // Rename bands for all (note that band number change between Landsat satellites)
  var L4 = L4.map(function(image){
    return image.select(
      [&#39;B1&#39;,&#39;B2&#39;,&#39;B3&#39;,&#39;B4&#39;,&#39;B5&#39;,&#39;B7&#39;],
      [&#39;blue&#39;,&#39;green&#39;,&#39;red&#39;,&#39;nir&#39;,&#39;swir1&#39;,&#39;swir2&#39;]
      );
  });
  var L5 = L5.map(function(image){
    return image.select(
      [&#39;B1&#39;,&#39;B2&#39;,&#39;B3&#39;,&#39;B4&#39;,&#39;B5&#39;,&#39;B7&#39;],
      [&#39;blue&#39;,&#39;green&#39;,&#39;red&#39;,&#39;nir&#39;,&#39;swir1&#39;,&#39;swir2&#39;]
      );
  });
  var L7 = L7.map(function(image){
    return image.select(
      [&#39;B1&#39;,&#39;B2&#39;,&#39;B3&#39;,&#39;B4&#39;,&#39;B5&#39;,&#39;B7&#39;],
      [&#39;blue&#39;,&#39;green&#39;,&#39;red&#39;,&#39;nir&#39;,&#39;swir1&#39;,&#39;swir2&#39;]
      );
  });
  var L8 = L8.map(function(image){
    return image.select(
      [&#39;B2&#39;,&#39;B3&#39;,&#39;B4&#39;,&#39;B5&#39;,&#39;B6&#39;,&#39;B7&#39;],
      [&#39;blue&#39;,&#39;green&#39;,&#39;red&#39;,&#39;nir&#39;,&#39;swir1&#39;,&#39;swir2&#39;]
      );
  });

  // Merge the collections
  // this collection is sorted by time
  var Collection = ee.ImageCollection(L8.merge(L7))
                        .sort(&#39;system:time_start&#39;,true);
  Collection = ee.ImageCollection(Collection.merge(L5))
                        .sort(&#39;system:time_start&#39;,true);
  Collection = ee.ImageCollection(Collection.merge(L4))
                        .sort(&#39;system:time_start&#39;,true);

  // Calculate an vegetation index on full collection
  Collection = Collection.map( calcIndex );
  // --------------------------------------------------- //
  // Mask out pixels with excess values (sensor errors)
  Collection = Collection.map( maskExcess );

  // Clip to feature collection geometry
  Collection = Collection.map(function(i){return i.clip(bbs_filter);});    

  // Reduce the time series of images into a single image
  var img = Collection.reduce(reduce);
  // --------------------------------- //

  // Run function to calculate the mean per polygon
  var extract = function(img,bbs){
    var extracted = img.reduceRegions(bbs, ee.Reducer.mean(), scale);
    return extracted;
  };

  // The extracted results
  var results = extract(img, bbs);

  // Export the output
  Export.table.toDrive({
      collection: results,
      folder: &#39;CropscapeTest&#39;, // Folder name in google drive
      description: &#39;Annual_&#39; + fname + &amp;quot;_AvgEVI&amp;quot; + &#39;_&#39;+fname,
      fileNamePrefix : &#39;Annual_&#39; + fname + &amp;quot;_AvgEVI&amp;quot; + &#39;_&#39;+fname,
      fileFormat: &#39;geoJSON&#39;
  });

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope these examples were helpful. I might post more of my code-examples at a later point.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br&gt;
Martin&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data science in the Google cloud - [1]</title>
      <link>https://martinjung.eu/post/2018_datascienceingooglecloud/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0200</pubDate>
      <guid>https://martinjung.eu/post/2018_datascienceingooglecloud/</guid>
      <description>&lt;p&gt;Anyone analysing &lt;strong&gt;big data&lt;/strong&gt; (buzzword, here refereed to as data too big to load into memory) soon will come to the realization that processing such data requires a lot of computational resources. During my PhD I mainly worked with the local high-performance-computer (HPC) at the University of Sussex. A couple of years into my PhD and I increasingly realized that our little HPC suffers from the &lt;a href=&#34;https://en.wikipedia.org/wiki/Tragedy_of_the_commons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tragedy of the commons&lt;/a&gt; with more and more people requesting computation time on a few available nodes.  That and also the tendency to have limited flexibility for running customized code (no root access, outdated modules and libraries, little space on the home drive to set up virtual environments, etc. &amp;hellip;) has made me quite frustrated and willing to switch to the &amp;ldquo;Cloud&amp;rdquo; for accessing computing resources.
\&lt;/p&gt;
&lt;p&gt;Cloud computing these days is well established, but mainly concentrated in the hands of three leading US firms. As far as I am aware one basically has to choose between Amazon AWS, Microsoft Azure and Google Cloud programs. Each have their own benefits and I leave it to the reader to search elsewhere for information on which one to chose.
\&lt;/p&gt;
&lt;p&gt;I picked the &lt;a href=&#34;https://cloud.google.com/free-trial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google cloud free trial offer&lt;/a&gt; partly because of the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;They have a 300$ give away. (I think Microsoft and Amazon offer sth. similar though)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The free trial period lasts 12 months after which it runs out without incurring further cost. Furthermore there will remain a &lt;a href=&#34;https://cloud.google.com/free/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;free-use contingent&lt;/a&gt; which can be exhausted for free. You fire up some use time on a f1-micro VM for instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am increasingly using &lt;a href=&#34;https://earthengine.google.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google&amp;rsquo;s Earth Engine platform&lt;/a&gt; and plan to use Google cloud storage to enhance my workflow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Private 1GB Git hosting (now especially useful since Competitor Microsoft has acquired Github )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That being said, I have also heard great things about AWS and Azure as well and might try them out at a later point as well.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So here is how I started. My goal was to first get familiar with computing in the cloud and try to install some standard tools. Therefore
First I fired up a micro instance &lt;strong&gt;V&lt;/strong&gt;irtual &lt;strong&gt;M&lt;/strong&gt;achine (which, in the google cloud, you can run over 700h each month for free).
&lt;img src=&#34;https://martinjung.eu/img/posts/GoogleCloudInstance.png&#34; alt=&#34;Micro instance in Google cloud &#34;&gt;
On the SSH button you have the opportunity to directly log into your cloud instance in the browser or in another ssh-client of you choosing.
Each VM can be selected and also started / stopped or completly reseted in this screen as well (also via the &lt;em&gt;&lt;strong&gt;&amp;quot;&amp;hellip;&amp;quot;&lt;/strong&gt;&lt;/em&gt; button!)
&lt;br&gt;
I&amp;rsquo;m going to install some basic data-science tools.
Here is the entire thing as bash-script to be executed on the next, bigger, VM in a later stage ;-)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# First lets install some necessary libraries
sudo apt-get -y install bzip2
sudo apt-get -y install screen

# Make a update and upgrade all, then clean up
sudo apt-get update
sudo apt-get -y upgrade
sudo apt-get -y autoremove

# Make download folder
mkdir downloads
cd downloads
# Download anaconda
wget https://repo.continuum.io/archive/Anaconda2-5.2.0-Linux-x86_64.sh
# Install in the background (accept and updating any previous installations)
bash Anaconda2-5.2.0-Linux-x86_64.sh -b -u -p $HOME/anaconda2
echo &amp;quot;export PATH=\&amp;quot;~/anaconda2/bin:$PATH\&amp;quot;&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
# Reload conf
source ~/.bashrc

# Install R
# Add debian stretch repo and key, then install
echo &amp;quot;deb http://cran.rstudio.com/bin/linux/debian stretch-cran35/&amp;quot; | sudo tee -a /etc/apt/sources.list
sudo apt-key adv --keyserver keys.gnupg.net --recv-key &#39;E19F5F87128899B192B1A2C2AD5F960A256A04AF&#39;
sudo apt-get update
sudo apt-get install -y r-base r-base-core r-base-dev
sudo apt-get install -y libatlas3-base

# Also install rstudio keyserver
sudo apt-get -y install psmisc libssl-dev libcurl4-openssl-dev libssh2-1-dev
wget https://download2.rstudio.org/rstudio-server-stretch-1.1.453-amd64.deb
sudo dpkg -i rstudio-server-stretch-1.1.453-amd64.deb

# Also install julia for later
sudo apt-get -y install julia

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note to myself&lt;/strong&gt;: For the future it might be easier to configure an analysis-ready docker image. Sth. to do for later&amp;hellip;
\&lt;/p&gt;
&lt;p&gt;Now we create a new configuration for a jupyter notebook and start it on the vm.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create config
jupyter notebook --generate-config

# Add this to the configure
echo &amp;quot;c = get_config()&amp;quot; &amp;gt;&amp;gt; ~/.jupyter/jupyter_notebook_config.py
echo &amp;quot;c.NotebookApp.ip = &#39;*&#39;&amp;quot; &amp;gt;&amp;gt; ~/.jupyter/jupyter_notebook_config.py
echo &amp;quot;c.NotebookApp.open_browser = False&amp;quot; &amp;gt;&amp;gt; ~/.jupyter/jupyter_notebook_config.py
echo &amp;quot;c.NotebookApp.port = 8177&amp;quot; &amp;gt;&amp;gt; ~/.jupyter/jupyter_notebook_config.py

# Set a password
jupyter notebook password

# Start up
jupyter-notebook --no-browser --port=8177

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The jupyter notebook can now be theoretically viewed in a browser. However we have to get access to the Google cloud intranet first. For this we will use the &lt;a href=&#34;https://cloud.google.com/sdk/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;google cloud SDK&lt;/a&gt;, which you need to install on your local computer as well.&lt;/p&gt;
&lt;p&gt;Then execute for the google cloud sdk:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# After installation: auth
gcloud init

# The open a SSH tunnel. For me that is:
gcloud compute ssh  --zone=us-central1-c --ssh-flag=&amp;quot;-D&amp;quot; --ssh-flag=&amp;quot;8177&amp;quot; --ssh-flag=&amp;quot;-N&amp;quot; --ssh-flag=&amp;quot;-n&amp;quot; wolkentest
# If you have never done before, you will need to create a public/private ssh key
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that you have created a SSH tunnel you can just open your local browser (ie. Chrome or similar) and navigate towards &lt;a href=&#34;localhost:8177&#34;&gt;localhost:8177&lt;/a&gt; and you should see your jupyter notebook. Happy computing!
&lt;img src=&#34;https://martinjung.eu/img/posts/GoogleCloudJupyterRunning.png&#34; alt=&#34;Jupyter running through an SSH tunnel&#34;&gt;&lt;/p&gt;
&lt;p&gt;At the end, ensure that the VM is turned off, otherwise it will create ongoing costs!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
